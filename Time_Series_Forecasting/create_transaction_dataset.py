# -*- coding: utf-8 -*-
"""
Created on Wed May 29 11:35:24 2019

@author: SHARDUL
"""
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import random
from datetime import datetime, timedelta


min_year=2015
max_year=datetime.now().year
start = datetime(min_year, 1, 1, 00, 00, 00)
years = max_year - min_year+1
end = start + timedelta(days=365 * years)
ts=list()
for i in range(1000):
    random_date = start + (end - start) * random.random()
    ts.append(random_date)
def gen_datetime(min_year=2015, max_year=datetime.now().year):
    # generate a datetime in format yyyy-mm-dd hh:mm:ss.000000
    start = datetime(min_year, 1, 1, 00, 00, 00)
    years = max_year - min_year + 1
    end = start + timedelta(days=365 * years)
    return start + (end - start) * random.random()

df=pd.read_csv('trans_hist.csv')
df=df.drop(columns="Unnamed: 0.1")
df=df.drop(columns="Unnamed: 0")
df.to_csv('final_trans_hist.csv')

size=list()
for i in range(0,1000):
    rd=random.randint(50, 350)
    size.append(rd)
df['No_Of_Pages']=size




dataset1=pd.read_csv('transaction.csv')
client=list(dataset1['User'])
client.append("Aditya")
client.append("Avni")
dat=pd.read_csv('names.csv')
unq_rd=str
unq_usr=np.unique(list(dataset1['User']))
usrs=list(dat['Owner'])
rid=unq_rd.split(' ')
own=pd.DataFrame()
own1=list()
repid=list()
cost=list()
own['Owner']=own1
own['Report_Id']=repid
own['Cost']=cost
own.to_csv('owner.csv')

trans=pd.DataFrame()
sendr=list()
rece=list()
earn=list()
time=list()
repid1=list()
for i in range(0,len(client)):
     rd=random.randrange(0, 500)
     sendr.append(own1[rd])
     rece.append(client[i])
     earn.append(cost[rd])
     repid1.append(repid[rd])
trans['Owner']=sendr
trans['Buyer']=rece
trans['Cost']=earn
trans['Report']=repid1
trans['Time']=ts
trans.to_csv("final_transactions.csv")

for i in range(0,998):
    i1=unq_usr[i]
    rd=random.randrange(0, 150)
    i1=str(i1+'-'+str(rd))
    rid.append(i1)